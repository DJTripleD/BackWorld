// Code generated by counterfeiter. DO NOT EDIT.
package processorfakes

import (
	"sync"

	"github.com/remove-bg/go/processor"
)

type FakeStorageInterface struct {
	ExpandPathsStub        func([]string) ([]string, error)
	expandPathsMutex       sync.RWMutex
	expandPathsArgsForCall []struct {
		arg1 []string
	}
	expandPathsReturns struct {
		result1 []string
		result2 error
	}
	expandPathsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	FileExistsStub        func(string) bool
	fileExistsMutex       sync.RWMutex
	fileExistsArgsForCall []struct {
		arg1 string
	}
	fileExistsReturns struct {
		result1 bool
	}
	fileExistsReturnsOnCall map[int]struct {
		result1 bool
	}
	WriteStub        func(string, []byte) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageInterface) ExpandPaths(arg1 []string) ([]string, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.expandPathsMutex.Lock()
	ret, specificReturn := fake.expandPathsReturnsOnCall[len(fake.expandPathsArgsForCall)]
	fake.expandPathsArgsForCall = append(fake.expandPathsArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("ExpandPaths", []interface{}{arg1Copy})
	fake.expandPathsMutex.Unlock()
	if fake.ExpandPathsStub != nil {
		return fake.ExpandPathsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.expandPathsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageInterface) ExpandPathsCallCount() int {
	fake.expandPathsMutex.RLock()
	defer fake.expandPathsMutex.RUnlock()
	return len(fake.expandPathsArgsForCall)
}

func (fake *FakeStorageInterface) ExpandPathsCalls(stub func([]string) ([]string, error)) {
	fake.expandPathsMutex.Lock()
	defer fake.expandPathsMutex.Unlock()
	fake.ExpandPathsStub = stub
}

func (fake *FakeStorageInterface) ExpandPathsArgsForCall(i int) []string {
	fake.expandPathsMutex.RLock()
	defer fake.expandPathsMutex.RUnlock()
	argsForCall := fake.expandPathsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageInterface) ExpandPathsReturns(result1 []string, result2 error) {
	fake.expandPathsMutex.Lock()
	defer fake.expandPathsMutex.Unlock()
	fake.ExpandPathsStub = nil
	fake.expandPathsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageInterface) ExpandPathsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.expandPathsMutex.Lock()
	defer fake.expandPathsMutex.Unlock()
	fake.ExpandPathsStub = nil
	if fake.expandPathsReturnsOnCall == nil {
		fake.expandPathsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.expandPathsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageInterface) FileExists(arg1 string) bool {
	fake.fileExistsMutex.Lock()
	ret, specificReturn := fake.fileExistsReturnsOnCall[len(fake.fileExistsArgsForCall)]
	fake.fileExistsArgsForCall = append(fake.fileExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FileExists", []interface{}{arg1})
	fake.fileExistsMutex.Unlock()
	if fake.FileExistsStub != nil {
		return fake.FileExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fileExistsReturns
	return fakeReturns.result1
}

func (fake *FakeStorageInterface) FileExistsCallCount() int {
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	return len(fake.fileExistsArgsForCall)
}

func (fake *FakeStorageInterface) FileExistsCalls(stub func(string) bool) {
	fake.fileExistsMutex.Lock()
	defer fake.fileExistsMutex.Unlock()
	fake.FileExistsStub = stub
}

func (fake *FakeStorageInterface) FileExistsArgsForCall(i int) string {
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	argsForCall := fake.fileExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageInterface) FileExistsReturns(result1 bool) {
	fake.fileExistsMutex.Lock()
	defer fake.fileExistsMutex.Unlock()
	fake.FileExistsStub = nil
	fake.fileExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStorageInterface) FileExistsReturnsOnCall(i int, result1 bool) {
	fake.fileExistsMutex.Lock()
	defer fake.fileExistsMutex.Unlock()
	fake.FileExistsStub = nil
	if fake.fileExistsReturnsOnCall == nil {
		fake.fileExistsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.fileExistsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStorageInterface) Write(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	fake.recordInvocation("Write", []interface{}{arg1, arg2Copy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1
}

func (fake *FakeStorageInterface) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeStorageInterface) WriteCalls(stub func(string, []byte) error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeStorageInterface) WriteArgsForCall(i int) (string, []byte) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorageInterface) WriteReturns(result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageInterface) WriteReturnsOnCall(i int, result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.expandPathsMutex.RLock()
	defer fake.expandPathsMutex.RUnlock()
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorageInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ processor.StorageInterface = new(FakeStorageInterface)
